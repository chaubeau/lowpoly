// Sobel edge detection
// http://en.wikipedia.org/wiki/Sobel_operator
//
varying vec2 v_Texcoord;
uniform sampler2D texture;

uniform float textureWidth : 512;
uniform float textureHeight : 512;

const vec3 w = vec3(0.2125, 0.7154, 0.0721);
float luminance(vec4 color)
{
    return dot(color.rgb, w);
}

void main()
{

    vec2 offset = vec2(1.0/textureWidth, 1.0/textureHeight);

    // top left
    float topLeft = luminance( texture2D(texture, v_Texcoord+vec2(-offset.x, -offset.y)) );
    // top
    float top = luminance( texture2D(texture, v_Texcoord+vec2(0, -offset.y)) );
    // top right
    float topRight = luminance( texture2D(texture, v_Texcoord+vec2(offset.x, -offset.y)) );
    // left
    float left = luminance( texture2D(texture, v_Texcoord+vec2(-offset.x, 0)) );
    // center
    float center = luminance( texture2D( texture, v_Texcoord) );
    // right
    float right = luminance( texture2D(texture, v_Texcoord+vec2(offset.x, 0)) );
    // bottom left
    float bottomLeft = luminance( texture2D(texture, v_Texcoord+vec2(-offset.x, offset.y)) );
    // bottom
    float bottom = luminance( texture2D(texture, v_Texcoord+vec2(0, offset.y)) );
    // bottom right
    float bottomRight = luminance( texture2D(texture, v_Texcoord+offset) );

    float h = -topLeft-2.0*top-topRight+bottomLeft+2.0*bottom+bottomRight;
    float v = -bottomLeft-2.0*left-topLeft+bottomRight+2.0*right+topRight;

    float mag = length(vec2(h,v));
    gl_FragColor = vec4(vec3(mag), 1.0);
}